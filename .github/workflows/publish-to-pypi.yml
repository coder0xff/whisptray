name: Publish Python distributions to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for setuptools_scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8' # A version compatible with your project

      - name: Install build dependencies
        run: pip install build

      - name: Build sdist
        run: python -m build --sdist

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist-artifact
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for setuptools_scm

      - name: Set up QEMU (for Linux arm64, ppc64le) - Optional
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,ppc64le

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      - name: Build wheels
        env:
          # For Linux: Install ALSA development libraries.
          # manylinux images are often CentOS-based (yum) or Debian/Ubuntu-based (apt-get).
          # The default manylinux2014 image is CentOS 7 based.
          # More modern images might use dnf or apt. cibuildwheel handles this well.
          # We'll try a common set; adjust if specific images need different commands.
          CIBW_BEFORE_BUILD_LINUX: >
            yum install -y alsa-lib-devel || apt-get update && apt-get install -y libasound2-dev || echo "ALSA dev libs not installed, build might fail if C ext needs them"
          CIBW_ARCHS_LINUX: auto aarch64 ppc64le # Build for x86_64, arm64, ppc64le on Linux
          CIBW_ARCHS_MACOS: x86_64 arm64 # Build for Intel and Apple Silicon on macOS
          CIBW_ARCHS_WINDOWS: AMD64 ARM64 # Build for x86_64 and ARM64 on Windows
          CIBW_SKIP: "cp37-* pp3*" # Skip older Python versions if not needed, cp38+ is your minimum
          CIBW_TEST_COMMAND: "echo 'No tests configured for wheels yet'" # Add your test command here later
          CIBW_TEST_REQUIRES: "" # Add test dependencies here later
        run: cibuildwheel --output-dir wheelhouse

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-artifact-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish_to_pypi:
    name: Publish distributions to PyPI
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://test.pypi.org/p/whisptray # URL to the PyPI project
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # Downloads all artifacts from the workflow run into the 'artifacts' directory
          # sdist-artifact will be in artifacts/sdist-artifact/
          # wheel-artifact-ubuntu-latest will be in artifacts/wheel-artifact-ubuntu-latest/
          # etc.
          path: artifacts 

      - name: Prepare package files
        run: |
          mkdir -p dist
          cp artifacts/sdist-artifact/*.tar.gz dist/
          find artifacts -name '*.whl' -exec cp {} dist/ \;
          echo "Files to publish:"
          ls -l dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.9.0
        # The `pypa/gh-action-pypi-publish` action will find all .whl and .tar.gz files
        # in the `dist/` directory by default, which we created in the "Prepare package files" step. 